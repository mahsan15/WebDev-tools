{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahsan\\\\Desktop\\\\react_Projects\\\\webdev\\\\webdev\\\\src\\\\containers\\\\PasswordGenerator\\\\PasswordGenerator.tsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport PasswordGeneratorComponent from \"../../components/PasswordGenerator/PasswordGenerator\";\nimport { setCheckedParam, setCopyToClipboardState, setPassword, setPasswordLength } from \"../../actions/PasswordGenerator/passwordGenerator\";\nimport generatePassword from \"../../utils/generators/passwordGenerator\";\nimport isChangeAllowed from \"../../utils/validators/passwordValidator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PasswordGenerator = _ref => {\n  let {\n    result,\n    checked,\n    passwordLength,\n    copyToClipboardButtonState,\n    setPasswordValue,\n    setPasswordLengthValue,\n    setChecked,\n    setCopyToClipboardButtonState\n  } = _ref;\n\n  if (result === '') {\n    setPasswordValue(generatePassword(passwordLength, checked));\n  }\n\n  const onCheckboxChange = event => {\n    const newCheckboxesState = { ...checked\n    };\n    newCheckboxesState[event.target.name] = event.target.checked;\n\n    if (isChangeAllowed(newCheckboxesState)) {\n      setChecked(newCheckboxesState);\n      setPasswordValue(generatePassword(passwordLength, newCheckboxesState));\n    }\n\n    setCopyToClipboardButtonState('default');\n  };\n\n  const onPasswordLengthChange = event => {\n    setPasswordLengthValue(event.value);\n    setCopyToClipboardButtonState('default');\n\n    if (event.value !== passwordLength) {\n      setPasswordValue(generatePassword(event.value, checked));\n    }\n  };\n\n  const onCopyButtonClick = () => {\n    navigator.clipboard.writeText(result);\n    setCopyToClipboardButtonState('pressed');\n  };\n\n  const onGenerateButtonClick = () => {\n    setPasswordValue(generatePassword(passwordLength, checked));\n    setCopyToClipboardButtonState('default');\n  };\n\n  return /*#__PURE__*/_jsxDEV(PasswordGeneratorComponent, {\n    result: result,\n    checked: checked,\n    passwordLength: passwordLength,\n    copyToClipboardButtonState: copyToClipboardButtonState,\n    onCopyButtonClick: onCopyButtonClick,\n    onGenerateButtonClick: onGenerateButtonClick,\n    onCheckboxChange: onCheckboxChange,\n    onPasswordLengthChange: onPasswordLengthChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 12\n  }, this);\n};\n\n_c = PasswordGenerator;\n\nconst mapStateToProps = state => ({\n  result: state.passwordGenerator.result,\n  checked: state.passwordGenerator.checked,\n  passwordLength: state.passwordGenerator.passwordLength,\n  copyToClipboardButtonState: state.passwordGenerator.copyToClipboardButtonState\n});\n\nexport default compose(connect(mapStateToProps, {\n  setPasswordValue: setPassword,\n  setPasswordLengthValue: setPasswordLength,\n  setChecked: setCheckedParam,\n  setCopyToClipboardButtonState: setCopyToClipboardState\n}))(PasswordGenerator);\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordGenerator\");","map":{"version":3,"names":["React","connect","compose","PasswordGeneratorComponent","setCheckedParam","setCopyToClipboardState","setPassword","setPasswordLength","generatePassword","isChangeAllowed","PasswordGenerator","result","checked","passwordLength","copyToClipboardButtonState","setPasswordValue","setPasswordLengthValue","setChecked","setCopyToClipboardButtonState","onCheckboxChange","event","newCheckboxesState","target","name","onPasswordLengthChange","value","onCopyButtonClick","navigator","clipboard","writeText","onGenerateButtonClick","mapStateToProps","state","passwordGenerator"],"sources":["C:/Users/Ahsan/Desktop/react_Projects/webdev/webdev/src/containers/PasswordGenerator/PasswordGenerator.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport PasswordGeneratorComponent\r\n    from \"../../components/PasswordGenerator/PasswordGenerator\";\r\nimport {\r\n    setCheckedParam, setCopyToClipboardState, setPassword, setPasswordLength\r\n} from \"../../actions/PasswordGenerator/passwordGenerator\";\r\nimport generatePassword from \"../../utils/generators/passwordGenerator\";\r\nimport {\r\n    CheckboxesType,\r\n    PasswordGeneratorContainerStateInterface\r\n} from \"../../types/passwordGenerator\";\r\nimport isChangeAllowed from \"../../utils/validators/passwordValidator\";\r\n\r\nconst PasswordGenerator = ({\r\n                               result,\r\n                               checked,\r\n                               passwordLength,\r\n                               copyToClipboardButtonState,\r\n                               setPasswordValue,\r\n                               setPasswordLengthValue,\r\n                               setChecked,\r\n                               setCopyToClipboardButtonState\r\n                           }: PasswordGeneratorContainerStateInterface) => {\r\n\r\n    if (result === '') {\r\n        setPasswordValue(generatePassword(passwordLength, checked))\r\n    }\r\n\r\n    const onCheckboxChange = (event: { target: { name: string; checked: boolean } }) => {\r\n        const newCheckboxesState: CheckboxesType = {...checked};\r\n        newCheckboxesState[event.target.name] = event.target.checked;\r\n        if (isChangeAllowed(newCheckboxesState)) {\r\n            setChecked(newCheckboxesState);\r\n            setPasswordValue(generatePassword(passwordLength, newCheckboxesState));\r\n        }\r\n        setCopyToClipboardButtonState('default');\r\n    }\r\n\r\n    const onPasswordLengthChange = (event: { value: string; }) => {\r\n        setPasswordLengthValue(event.value);\r\n        setCopyToClipboardButtonState('default');\r\n        if (event.value !== passwordLength) {\r\n            setPasswordValue(generatePassword(event.value, checked));\r\n        }\r\n    }\r\n\r\n    const onCopyButtonClick = () => {\r\n        navigator.clipboard.writeText(result);\r\n        setCopyToClipboardButtonState('pressed');\r\n    }\r\n\r\n    const onGenerateButtonClick = () => {\r\n        setPasswordValue(generatePassword(passwordLength, checked));\r\n        setCopyToClipboardButtonState('default');\r\n    }\r\n\r\n    return <PasswordGeneratorComponent\r\n        result={result}\r\n        checked={checked}\r\n        passwordLength={passwordLength}\r\n        copyToClipboardButtonState={copyToClipboardButtonState}\r\n        onCopyButtonClick={onCopyButtonClick}\r\n        onGenerateButtonClick={onGenerateButtonClick}\r\n        onCheckboxChange={onCheckboxChange}\r\n        onPasswordLengthChange={onPasswordLengthChange}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    result: state.passwordGenerator.result,\r\n    checked: state.passwordGenerator.checked,\r\n    passwordLength: state.passwordGenerator.passwordLength,\r\n    copyToClipboardButtonState: state.passwordGenerator.copyToClipboardButtonState,\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        setPasswordValue: setPassword,\r\n        setPasswordLengthValue: setPasswordLength,\r\n        setChecked: setCheckedParam,\r\n        setCopyToClipboardButtonState: setCopyToClipboardState\r\n    }))(PasswordGenerator);\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,OAAOC,0BAAP,MACS,sDADT;AAEA,SACIC,eADJ,EACqBC,uBADrB,EAC8CC,WAD9C,EAC2DC,iBAD3D,QAEO,mDAFP;AAGA,OAAOC,gBAAP,MAA6B,0CAA7B;AAKA,OAAOC,eAAP,MAA4B,0CAA5B;;;AAEA,MAAMC,iBAAiB,GAAG,QASiD;EAAA,IAThD;IACIC,MADJ;IAEIC,OAFJ;IAGIC,cAHJ;IAIIC,0BAJJ;IAKIC,gBALJ;IAMIC,sBANJ;IAOIC,UAPJ;IAQIC;EARJ,CASgD;;EAEvE,IAAIP,MAAM,KAAK,EAAf,EAAmB;IACfI,gBAAgB,CAACP,gBAAgB,CAACK,cAAD,EAAiBD,OAAjB,CAAjB,CAAhB;EACH;;EAED,MAAMO,gBAAgB,GAAIC,KAAD,IAA2D;IAChF,MAAMC,kBAAkC,GAAG,EAAC,GAAGT;IAAJ,CAA3C;IACAS,kBAAkB,CAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,CAAlB,GAAwCH,KAAK,CAACE,MAAN,CAAaV,OAArD;;IACA,IAAIH,eAAe,CAACY,kBAAD,CAAnB,EAAyC;MACrCJ,UAAU,CAACI,kBAAD,CAAV;MACAN,gBAAgB,CAACP,gBAAgB,CAACK,cAAD,EAAiBQ,kBAAjB,CAAjB,CAAhB;IACH;;IACDH,6BAA6B,CAAC,SAAD,CAA7B;EACH,CARD;;EAUA,MAAMM,sBAAsB,GAAIJ,KAAD,IAA+B;IAC1DJ,sBAAsB,CAACI,KAAK,CAACK,KAAP,CAAtB;IACAP,6BAA6B,CAAC,SAAD,CAA7B;;IACA,IAAIE,KAAK,CAACK,KAAN,KAAgBZ,cAApB,EAAoC;MAChCE,gBAAgB,CAACP,gBAAgB,CAACY,KAAK,CAACK,KAAP,EAAcb,OAAd,CAAjB,CAAhB;IACH;EACJ,CAND;;EAQA,MAAMc,iBAAiB,GAAG,MAAM;IAC5BC,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BlB,MAA9B;IACAO,6BAA6B,CAAC,SAAD,CAA7B;EACH,CAHD;;EAKA,MAAMY,qBAAqB,GAAG,MAAM;IAChCf,gBAAgB,CAACP,gBAAgB,CAACK,cAAD,EAAiBD,OAAjB,CAAjB,CAAhB;IACAM,6BAA6B,CAAC,SAAD,CAA7B;EACH,CAHD;;EAKA,oBAAO,QAAC,0BAAD;IACH,MAAM,EAAEP,MADL;IAEH,OAAO,EAAEC,OAFN;IAGH,cAAc,EAAEC,cAHb;IAIH,0BAA0B,EAAEC,0BAJzB;IAKH,iBAAiB,EAAEY,iBALhB;IAMH,qBAAqB,EAAEI,qBANpB;IAOH,gBAAgB,EAAEX,gBAPf;IAQH,sBAAsB,EAAEK;EARrB;IAAA;IAAA;IAAA;EAAA,QAAP;AAUH,CArDD;;KAAMd,iB;;AAuDN,MAAMqB,eAAe,GAAIC,KAAD,KAAiB;EACrCrB,MAAM,EAAEqB,KAAK,CAACC,iBAAN,CAAwBtB,MADK;EAErCC,OAAO,EAAEoB,KAAK,CAACC,iBAAN,CAAwBrB,OAFI;EAGrCC,cAAc,EAAEmB,KAAK,CAACC,iBAAN,CAAwBpB,cAHH;EAIrCC,0BAA0B,EAAEkB,KAAK,CAACC,iBAAN,CAAwBnB;AAJf,CAAjB,CAAxB;;AAOA,eAAeZ,OAAO,CAClBD,OAAO,CAAC8B,eAAD,EAAkB;EACrBhB,gBAAgB,EAAET,WADG;EAErBU,sBAAsB,EAAET,iBAFH;EAGrBU,UAAU,EAAEb,eAHS;EAIrBc,6BAA6B,EAAEb;AAJV,CAAlB,CADW,CAAP,CAMPK,iBANO,CAAf"},"metadata":{},"sourceType":"module"}