{"ast":null,"code":"import React,{useRef}from\"react\";import{Toast}from'primereact/toast';import{compose}from\"redux\";import{connect}from\"react-redux\";import GenerateCrontabLineComponent from'../../components/CrontabGenerator/GenerateCrontabLine';import{setResult}from\"../../actions/CrontabGenerator/generateCrontabLine\";import{getCronExpression,getFormState,getResult}from\"../../selectors/crontabGenerator\";import{setMinuteHasError}from\"../../actions/CrontabGenerator/Schedule/minutes\";import{setDayHasError}from\"../../actions/CrontabGenerator/Schedule/days\";import{setHourHasError}from\"../../actions/CrontabGenerator/Schedule/hours\";import{setMonthHasError}from\"../../actions/CrontabGenerator/Schedule/months\";import{setWeekdayHasError}from\"../../actions/CrontabGenerator/Schedule/weekday\";import{setCommandHasError}from\"../../actions/CrontabGenerator/commandToExecute\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GenerateCrontabLine=function GenerateCrontabLine(_ref){var formState=_ref.formState,result=_ref.result,setResultValue=_ref.setResultValue,setMinuteError=_ref.setMinuteError,setHourError=_ref.setHourError,setDayError=_ref.setDayError,setMonthError=_ref.setMonthError,setWeekdayError=_ref.setWeekdayError,setCommandError=_ref.setCommandError;var toast=useRef(null);var showError=function showError(message){toast.current.show({severity:'error',summary:message});};var onButtonClick=function onButtonClick(){var expression=getCronExpression(formState);switch(expression){case'Invalid Minutes':showError('Please choose at least one entry in minutes field.');setMinuteError(true);break;case'Invalid Hours':showError('Please choose at least one entry in hours field.');setHourError(true);break;case'Invalid Days':showError('Please choose at least one entry in days field.');setDayError(true);break;case'Invalid Months':showError('Please choose at least one entry in months field.');setMonthError(true);break;case'Invalid Weekday':showError('Please choose at least one entry in weekday field.');setWeekdayError(true);break;case'Invalid Command':showError('Please enter a command.');setCommandError(true);break;case'Invalid Email':showError('Please enter a valid Email address.');break;case'Invalid Path':showError('Please enter a file path for saving output.');break;default:setResultValue(expression);}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Toast,{ref:toast,position:\"top-center\"}),/*#__PURE__*/_jsx(GenerateCrontabLineComponent,{result:result,onClick:onButtonClick})]});};var mapStateToProps=function mapStateToProps(state){return{formState:getFormState(state),result:getResult(state)};};export default compose(connect(mapStateToProps,{setMinuteError:setMinuteHasError,setHourError:setHourHasError,setDayError:setDayHasError,setMonthError:setMonthHasError,setWeekdayError:setWeekdayHasError,setCommandError:setCommandHasError,setResultValue:setResult}))(GenerateCrontabLine);","map":{"version":3,"names":["React","useRef","Toast","compose","connect","GenerateCrontabLineComponent","setResult","getCronExpression","getFormState","getResult","setMinuteHasError","setDayHasError","setHourHasError","setMonthHasError","setWeekdayHasError","setCommandHasError","GenerateCrontabLine","formState","result","setResultValue","setMinuteError","setHourError","setDayError","setMonthError","setWeekdayError","setCommandError","toast","showError","message","current","show","severity","summary","onButtonClick","expression","mapStateToProps","state"],"sources":["C:/Users/Ahsan/Desktop/react_Projects/webdev/web-developer-tools/src/containers/CrontabGenerator/GenerateCrontabLine.tsx"],"sourcesContent":["import React, {useRef} from \"react\";\r\nimport {Toast} from 'primereact/toast';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport GenerateCrontabLineComponent\r\n    from '../../components/CrontabGenerator/GenerateCrontabLine';\r\nimport {setResult} from \"../../actions/CrontabGenerator/generateCrontabLine\";\r\nimport {\r\n    getCronExpression,\r\n    getFormState,\r\n    getResult\r\n} from \"../../selectors/crontabGenerator\";\r\nimport {setMinuteHasError} from \"../../actions/CrontabGenerator/Schedule/minutes\";\r\nimport {setDayHasError} from \"../../actions/CrontabGenerator/Schedule/days\";\r\nimport {setHourHasError} from \"../../actions/CrontabGenerator/Schedule/hours\";\r\nimport {setMonthHasError} from \"../../actions/CrontabGenerator/Schedule/months\";\r\nimport {setWeekdayHasError} from \"../../actions/CrontabGenerator/Schedule/weekday\";\r\nimport {setCommandHasError} from \"../../actions/CrontabGenerator/commandToExecute\";\r\nimport {GenerateCrontabLineContainerState} from \"../../types/crontabGenerator\";\r\n\r\nconst GenerateCrontabLine = ({\r\n                                 formState,\r\n                                 result,\r\n                                 setResultValue,\r\n                                 setMinuteError,\r\n                                 setHourError,\r\n                                 setDayError,\r\n                                 setMonthError,\r\n                                 setWeekdayError,\r\n                                 setCommandError\r\n                             }: GenerateCrontabLineContainerState) => {\r\n\r\n    const toast: React.MutableRefObject<any> = useRef(null);\r\n\r\n    const showError = (message: string) => {\r\n        toast.current.show({severity: 'error', summary: message});\r\n    }\r\n\r\n    const onButtonClick = () => {\r\n\r\n        const expression: string = getCronExpression(formState);\r\n\r\n        switch (expression) {\r\n            case 'Invalid Minutes':\r\n                showError('Please choose at least one entry in minutes field.');\r\n                setMinuteError(true);\r\n                break;\r\n            case 'Invalid Hours':\r\n                showError('Please choose at least one entry in hours field.');\r\n                setHourError(true);\r\n                break;\r\n            case 'Invalid Days':\r\n                showError('Please choose at least one entry in days field.');\r\n                setDayError(true)\r\n                break;\r\n            case 'Invalid Months':\r\n                showError('Please choose at least one entry in months field.');\r\n                setMonthError(true);\r\n                break;\r\n            case 'Invalid Weekday':\r\n                showError('Please choose at least one entry in weekday field.');\r\n                setWeekdayError(true);\r\n                break;\r\n            case 'Invalid Command':\r\n                showError('Please enter a command.');\r\n                setCommandError(true);\r\n                break;\r\n            case 'Invalid Email':\r\n                showError('Please enter a valid Email address.');\r\n                break;\r\n            case 'Invalid Path':\r\n                showError('Please enter a file path for saving output.');\r\n                break;\r\n            default:\r\n                setResultValue(expression);\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Toast ref={toast} position=\"top-center\"/>\r\n        <GenerateCrontabLineComponent result={result} onClick={onButtonClick}/>\r\n    </>\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    formState: getFormState(state),\r\n    result: getResult(state),\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        setMinuteError: setMinuteHasError,\r\n        setHourError: setHourHasError,\r\n        setDayError: setDayHasError,\r\n        setMonthError: setMonthHasError,\r\n        setWeekdayError: setWeekdayHasError,\r\n        setCommandError: setCommandHasError,\r\n        setResultValue: setResult\r\n    })\r\n)(GenerateCrontabLine);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}